from flask import Flask, render_template, request, redirect, flash, url_for, jsonify
import math
import requests
import threading  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
from auth import auth, login_manager
from flask_login import login_required, current_user
from utils import log_action
import datetime
from sqlalchemy.sql import func
from werkzeug.security import generate_password_hash
from bot import update_question_status, notify_user_about_response
from functools import wraps  # –î–æ–±–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –∏ —Å–µ—Å—Å–∏–∏ SQLAlchemy
from database import SessionLocal, Question, User, Log, AnswerHistory, FAQ, ResponseRating

def combine(dict1, dict2):
    new_dict = dict1.copy() if dict1 else {}
    new_dict.update(dict2)
    return new_dict

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (UTC+3)
def to_moscow_time(dt):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç datetime –∏–∑ UTC –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)"""
    if not dt:
        return dt
    # –î–æ–±–∞–≤–ª—è–µ–º 3 —á–∞—Å–∞ –∫ –≤—Ä–µ–º–µ–Ω–∏
    return dt + datetime.timedelta(hours=3)

app = Flask(__name__)
app.secret_key = "—Å–µ–∫—Ä–µ—Ç–Ω—ã–π_–∫–ª—é—á"
app.register_blueprint(auth)
login_manager.init_app(app)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
app.jinja_env.filters['combine'] = combine
app.jinja_env.filters['to_moscow_time'] = to_moscow_time


# –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
def requires_role(*roles):
    def decorator(f):
        @wraps(f)
        def wrapped(*args, **kwargs):
            if not current_user.role in roles:
                flash("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", "danger")
                return redirect(url_for("index"))
            return f(*args, **kwargs)

        return wrapped

    return decorator


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)
@app.route("/")
@login_required
@requires_role("admin", "moderator", "superadmin")
def index():
    session = SessionLocal()
    try:
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        query = session.query(Question).filter(Question.is_archived == 0)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        search = request.args.get('search', '').strip()
        status = request.args.get('status', '').strip()
        priority = request.args.get('priority', '').strip()

        if search:
            query = query.filter(Question.question.ilike(f'%{search}%'))
        if status:
            query = query.filter(Question.status == status)
        if priority and priority.isdigit():
            query = query.filter(Question.priority == int(priority))

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é), –∑–∞—Ç–µ–º –ø–æ ID
        query = query.order_by(Question.priority.desc(), Question.id.desc())

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        page = request.args.get('page', 1, type=int)
        per_page = 10

        questions = query.offset((page - 1) * per_page).limit(per_page).all()
        total = query.count()
        total_pages = math.ceil(total / per_page)
        users = session.query(User).all()

        return render_template(
            "index.html",
            questions=questions,
            page=page,
            total_pages=total_pages,
            users=users
        )
    finally:
        session.close()


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ (GET ‚Äì —Ñ–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, POST ‚Äì —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@app.route("/edit/<int:question_id>", methods=["GET", "POST"])
@login_required
@requires_role("admin", "moderator", "superadmin")
def edit_question(question_id):
    session = SessionLocal()
    try:
        question = session.get(Question, question_id)
        logs = session.query(Log).filter(
            Log.question_id == question_id
        ).order_by(Log.timestamp.desc()).all()

        if request.method == "POST":
            action = request.form.get("action", "save")
            new_status = request.form.get("status")
            new_response = request.form.get("response", "").strip()
            new_priority = int(request.form.get("priority", 1))

            # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            changes = []

            if action == "send":
                new_status = "–æ—Ç–≤–µ—á–µ–Ω"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if question.status != new_status:
                changes.append(f"üìù –°—Ç–∞—Ç—É—Å: {question.status} ‚ûú {new_status}")

            if question.priority != new_priority:
                priority_icons = {1: "üü¢", 2: "üü°", 3: "üî¥"}
                old_priority_text = f"{priority_icons[question.priority]} {question.priority}"
                new_priority_text = f"{priority_icons[new_priority]} {new_priority}"
                changes.append(f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {old_priority_text} ‚ûú {new_priority_text}")

            if question.response != new_response:
                old_response = question.response or "–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"
                changes.append(
                    f"üí¨ –û—Ç–≤–µ—Ç:\n"
                    f"–î–æ: {old_response[:100]}{'...' if len(old_response) > 100 else ''}\n"
                    f"–ü–æ—Å–ª–µ: {new_response[:100]}{'...' if len(new_response) > 100 else ''}"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤–æ–ø—Ä–æ—Å–∞
            question.status = new_status
            question.response = new_response
            question.priority = new_priority

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if changes:
                log_entry = Log(
                    user_id=current_user.id,
                    question_id=question_id,
                    action="\n".join(changes),
                    action_type='edit',
                    timestamp=datetime.datetime.now()
                )
                session.add(log_entry)

            session.commit()

            if new_status == "–æ—Ç–≤–µ—á–µ–Ω":
                notify_user_about_response(question_id)

            flash("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!", "success")
            return redirect(url_for("index"))

        return render_template(
            "edit.html",
            q=question,
            logs=logs,
            now=datetime.datetime.now()
        )
    except Exception as e:
        session.rollback()
        flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}", "danger")
        return redirect(url_for("index"))
    finally:
        session.close()


# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ (–∏–∑ –∞—Ä—Ö–∏–≤–∞)
@app.route("/questions/restore/<int:question_id>", methods=["POST"])
@login_required
@requires_role("admin", "moderator", "superadmin")
def restore_question(question_id):
    session = SessionLocal()
    try:
        q_obj = session.query(Question).filter(Question.id == question_id).first()
        if q_obj:
            q_obj.is_archived = 0
            log_entry = Log(
                user_id=current_user.id,
                question_id=question_id,
                action=f"–í–æ–ø—Ä–æ—Å ID {question_id} –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∞—Ä—Ö–∏–≤–∞",
                action_type='restore',
                timestamp=datetime.datetime.now()
            )
            session.add(log_entry)
            session.commit()
            flash("–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", "success")
        else:
            flash("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "danger")
    finally:
        session.close()
    return redirect(url_for("archive"))


# –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
@app.route("/questions/delete/<int:question_id>", methods=["POST"])
@login_required
@requires_role("admin", "moderator", "superadmin")
def delete_question(question_id):
    session = SessionLocal()
    try:
        q_obj = session.query(Question).filter(Question.id == question_id).first()
        if not q_obj:
            flash("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "danger")
            return redirect(url_for("archive"))

        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ª–æ–≥–∏
        session.query(Log).filter(Log.question_id == question_id).delete()

        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º –≤–æ–ø—Ä–æ—Å
        question_text = q_obj.question
        session.delete(q_obj)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–æ–≥ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –≤–æ–ø—Ä–æ—Å—É)
        log_entry = Log(
            user_id=current_user.id,
            action=f"–í–æ–ø—Ä–æ—Å ID {question_id} –±—ã–ª —É–¥–∞–ª—ë–Ω",
            action_type='delete',
            timestamp=datetime.datetime.now()
        )
        session.add(log_entry)
        session.commit()
        flash("–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", "success")
    finally:
        session.close()
    return redirect(url_for("archive"))


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
@app.route("/users")
@login_required
@requires_role("admin", "superadmin")
def manage_users():
    try:
        page = int(request.args.get('page', 1))
    except ValueError:
        page = 1
    per_page = 10
    offset = (page - 1) * per_page

    session = SessionLocal()
    try:
        users = session.query(User).order_by(
            User.id.desc()
        ).limit(per_page).offset(offset).all()

        total = session.query(User).count()
        total_pages = math.ceil(total / per_page)

        return render_template(
            "users.html",
            users=users,
            page=page,
            total_pages=total_pages
        )
    finally:
        session.close()


# –û—Ç–∑—ã–≤ –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route("/users/revoke/<int:user_id>", methods=["POST"])
@login_required
@requires_role("admin", "superadmin")
def revoke_user(user_id):
    session = SessionLocal()
    try:
        user = session.query(User).filter(User.id == user_id).first()
        if user and user.role == "admin" and current_user.role != "superadmin":
            flash("–ù–µ–ª—å–∑—è –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", "danger")
            return redirect(url_for("manage_users"))
        if user and user.role == "superadmin" and current_user.role != "superadmin":
            flash("–ù–µ–ª—å–∑—è –æ—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø —É —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", "danger")
            return redirect(url_for("manage_users"))
        if user:
            user.is_active = 0
            user.role = 'user'
            session.commit()
    finally:
        session.close()
    return redirect(url_for("manage_users"))


# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route("/users/delete/<int:user_id>", methods=["POST"])
@login_required
@requires_role("admin", "superadmin")
def delete_user(user_id):
    if user_id == current_user.id:
        flash("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å.", "danger")
        return redirect(url_for("manage_users"))

    session = SessionLocal()
    try:
        user = session.query(User).filter(User.id == user_id).first()
        if not user:
            flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "danger")
            return redirect(url_for("manage_users"))

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
        if current_user.role == "superadmin":
            # –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –ª—é–±–æ–≥–æ, –∫—Ä–æ–º–µ —Å–µ–±—è
            pass
        else:
            # –ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
            if user.role == "superadmin":
                flash("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.", "danger")
                return redirect(url_for("manage_users"))

            # –ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∞
            if user.role == "admin":
                flash("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", "danger")
                return redirect(url_for("manage_users"))

        username = user.username
        role = user.role
        session.delete(user)
        session.commit()

        log_action(
            f"–£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —Å —Ä–æ–ª—å—é '{role}'",
            action_type='user_delete'
        )

        flash(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", "success")
    except Exception as e:
        session.rollback()
        flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}", "danger")
    finally:
        session.close()

    return redirect(url_for("manage_users"))


# –û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route("/users/approve/<int:user_id>", methods=["POST"])
@login_required
@requires_role("admin", "superadmin")
def approve_user(user_id):
    session = SessionLocal()
    try:
        user = session.query(User).filter(User.id == user_id).first()
        if user:
            user.is_active = 1
            user.role = 'moderator'
            session.commit()
    finally:
        session.close()

    return redirect(url_for("manage_users"))


# –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
@app.route("/questions/archive/<int:question_id>", methods=["POST"])
@login_required
@requires_role("admin", "moderator", "superadmin")
def archive_question(question_id):
    session = SessionLocal()
    try:
        q_obj = session.query(Question).filter(Question.id == question_id).first()
        if q_obj:
            q_obj.is_archived = 1
            log_entry = Log(
                user_id=current_user.id,
                question_id=question_id,
                action=f"–í–æ–ø—Ä–æ—Å ID {question_id} –±—ã–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∞—Ä—Ö–∏–≤",
                action_type='archive',
                timestamp=datetime.datetime.now()
            )
            session.add(log_entry)
            session.commit()
            flash(f"–í–æ–ø—Ä–æ—Å ID {question_id} —É—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω.", "success")
        else:
            flash("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "danger")
    finally:
        session.close()
    return redirect(url_for("index"))


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@app.route("/logs")
@login_required
@requires_role("admin", "superadmin")
def logs_page():
    try:
        page = int(request.args.get('page', 1))
    except ValueError:
        page = 1
    per_page = 10
    offset = (page - 1) * per_page

    session = SessionLocal()
    try:
        logs = session.query(Log).order_by(
            Log.timestamp.desc()
        ).limit(per_page).offset(offset).all()

        total = session.query(Log).count()
        total_pages = math.ceil(total / per_page)

        return render_template(
            "logs.html",
            logs=logs,
            page=page,
            total_pages=total_pages
        )
    finally:
        session.close()


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
@app.route("/questions_json")
@login_required
@requires_role("admin", "moderator", "superadmin")
def questions_json():
    search_query = request.args.get("search", "")
    status_filter = request.args.get("status", "")
    user_filter = request.args.get("user", "")
    priority_filter = request.args.get("priority", "")

    session = SessionLocal()
    try:
        query = session.query(Question).filter(Question.is_archived == 0)
        if search_query:
            query = query.filter(Question.question.like(f"%{search_query}%"))
        if status_filter:
            query = query.filter(Question.status == status_filter)
        if user_filter:
            query = query.filter(Question.user_id == user_filter)
        if priority_filter:
            query = query.filter(Question.priority == priority_filter)
        query = query.order_by(Question.priority.desc())
        questions = query.all()
    finally:
        session.close()

    questions_list = []
    for q in questions:
        questions_list.append({
            "id": q.id,
            "user_id": q.user_id,
            "question": q.question,
            "status": q.status,
            "response": q.response,
            "priority": q.priority
        })
    return jsonify(questions_list)


# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
@app.route("/questions/delete_all_archived", methods=["POST"])
@login_required
@requires_role("admin", "superadmin")
def delete_all_archived():
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        archived_questions = session.query(Question.id).filter(Question.is_archived == True).all()
        archived_ids = [q.id for q in archived_questions]
        count = len(archived_ids)

        if count > 0:
            # –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏ –¥–ª—è –≤—Å–µ—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            session.query(Log).filter(Log.question_id.in_(archived_ids)).delete(synchronize_session=False)

            # –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
            session.query(Question).filter(Question.is_archived == True).delete(synchronize_session=False)

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥–∞—Ö
            log_entry = Log(
                user_id=current_user.id,
                action=f"üóëÔ∏è –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ {count} –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (ID: {', '.join(map(str, archived_ids))})",
                action_type='delete',
                timestamp=datetime.datetime.now()
            )
            session.add(log_entry)
            session.commit()
            flash(f"–£–¥–∞–ª–µ–Ω–æ {count} –∞—Ä—Ö–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.", "success")
        else:
            flash("–ù–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", "info")
    except Exception as e:
        session.rollback()
        flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}", "danger")
    finally:
        session.close()
    return redirect(url_for("archive"))


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ FAQ
@app.route("/faq")
@login_required
@requires_role("admin", "moderator", "superadmin")
def faq():
    try:
        page = int(request.args.get('page', 1))
    except ValueError:
        page = 1
    per_page = 10
    offset = (page - 1) * per_page

    session = SessionLocal()
    try:
        faqs = session.query(FAQ).order_by(
            FAQ.id.desc()
        ).limit(per_page).offset(offset).all()

        total = session.query(FAQ).count()
        total_pages = math.ceil(total / per_page)

        return render_template(
            "faq.html",
            faqs=faqs,
            page=page,
            total_pages=total_pages
        )
    finally:
        session.close()


@app.route("/faq/add", methods=["GET", "POST"])
@login_required
@requires_role("admin", "superadmin")
def add_faq():
    if request.method == "POST":
        question_text = request.form.get("question").strip()
        answer_text = request.form.get("answer").strip()

        if question_text and answer_text:
            session = SessionLocal()
            try:
                new_faq = FAQ(question=question_text, answer=answer_text)
                session.add(new_faq)
                session.commit()
                flash("FAQ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", "success")
                log_action(
                    action=f"FAQ ID: {new_faq.id} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω, –≤–æ–ø—Ä–æ—Å: {new_faq.question}",
                    action_type='faq_add'
                )
            except Exception as e:
                session.rollback()
                flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ FAQ: {str(e)}", "danger")
                log_action(
                    action=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ FAQ: {str(e)}",
                    action_type='faq_add_error'
                )

            finally:
                session.close()
            return redirect(url_for("faq"))
        else:
            flash("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç.", "danger")

    return render_template("add_faq.html")


@app.route("/faq/edit/<int:faq_id>", methods=["GET", "POST"])
@login_required
@requires_role("admin", "superadmin")
def edit_faq(faq_id):
    session = SessionLocal()
    try:
        faq = session.query(FAQ).filter(FAQ.id == faq_id).first()
    finally:
        session.close()

    if not faq:
        flash("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "danger")
        return redirect(url_for("faq"))

    if request.method == "POST":
        new_question = request.form.get("question").strip()
        new_answer = request.form.get("answer").strip()
        session = SessionLocal()
        try:
            faq_obj = session.query(FAQ).filter(FAQ.id == faq_id).first()
            if faq_obj:
                old_question = faq_obj.question
                old_answer = faq_obj.answer
                faq_obj.question = new_question
                faq_obj.answer = new_answer
                session.commit()
                flash("FAQ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.", "success")
                log_action(
                    action=f"FAQ ID: {faq_obj.id}. –°—Ç–∞—Ä—ã–π –≤–æ–ø—Ä–æ—Å: {old_question}; –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: {faq_obj.question}",
                    action_type='faq_edit'
                )
            else:
                flash("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "danger")
        except Exception as e:
            session.rollback()
            flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ FAQ: {str(e)}", "danger")
            log_action(
                action=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ FAQ: {str(e)}",
                action_type='faq_edit'
            )
        finally:
            session.close()
        return redirect(url_for("faq"))

    return render_template("edit_faq.html", faq=faq)


@app.route("/faq/delete/<int:faq_id>", methods=["POST"])
@login_required
@requires_role("admin", "superadmin")
def delete_faq(faq_id):
    session = SessionLocal()
    try:
        faq = session.query(FAQ).filter(FAQ.id == faq_id).first()
        if faq:
            session.delete(faq)
            session.commit()
            flash("FAQ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", "success")
            log_action(
                action=f"FAQ ID: {faq_id} –±—ã–ª —É–¥–∞–ª—ë–Ω",
                action_type='faq_delete'
            )
        else:
            flash("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "danger")
    except Exception as e:
        session.rollback()
        flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ FAQ: {str(e)}", "danger")
        log_action(
            action=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ FAQ: {str(e)}",
            action_type='faq_delete'
        )
    finally:
        session.close()
    return redirect(url_for("faq"))


@app.route("/archive")
@login_required
@requires_role("admin", "moderator", "superadmin")
def archive():
    session = SessionLocal()
    try:
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        query = session.query(Question).filter(Question.is_archived == True)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        search = request.args.get('search', '').strip()
        status = request.args.get('status', '').strip()
        priority = request.args.get('priority', '').strip()

        if search:
            query = query.filter(Question.question.ilike(f'%{search}%'))
        if status:
            query = query.filter(Question.status == status)
        if priority and priority.isdigit():
            query = query.filter(Question.priority == int(priority))

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é), –∑–∞—Ç–µ–º –ø–æ ID
        query = query.order_by(Question.priority.desc(), Question.id.desc())

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        page = request.args.get('page', 1, type=int)
        per_page = 10

        questions = query.offset((page - 1) * per_page).limit(per_page).all()
        total = query.count()
        total_pages = math.ceil(total / per_page)
        users = session.query(User).all()

        return render_template(
            'archive.html',
            questions=questions,
            page=page,
            total_pages=total_pages,
            users=users
        )
    finally:
        session.close()


@app.route("/analytics")
@login_required
@requires_role("admin", "superadmin")
def analytics():
    session = SessionLocal()
    try:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        faq_ratings = session.query(
            func.sum(ResponseRating.rating).label("positive"),
            func.count(ResponseRating.id).label("total")
        ).filter(ResponseRating.source == "faq").first()

        ai_ratings = session.query(
            func.sum(ResponseRating.rating).label("positive"),
            func.count(ResponseRating.id).label("total")
        ).filter(ResponseRating.source == "ai").first()

        human_ratings = session.query(
            func.sum(ResponseRating.rating).label("positive"),
            func.count(ResponseRating.id).label("total")
        ).filter(ResponseRating.source == "human").first()

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        faq_positive_percent = (faq_ratings.positive / faq_ratings.total * 100) if faq_ratings.total > 0 else 0
        ai_positive_percent = (ai_ratings.positive / ai_ratings.total * 100) if ai_ratings.total > 0 else 0
        human_positive_percent = (human_ratings.positive / human_ratings.total * 100) if human_ratings.total > 0 else 0

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        seven_days_ago = datetime.datetime.now().date() - datetime.timedelta(days=7)

        # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –¥–Ω—è–º
        weekly_positive = session.query(
            func.date(ResponseRating.timestamp).label('date'),
            func.count(ResponseRating.id).label('count')
        ).filter(
            func.date(ResponseRating.timestamp) >= seven_days_ago,
            ResponseRating.rating == 1
        ).group_by(func.date(ResponseRating.timestamp)).all()

        # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –¥–Ω—è–º
        weekly_negative = session.query(
            func.date(ResponseRating.timestamp).label('date'),
            func.count(ResponseRating.id).label('count')
        ).filter(
            func.date(ResponseRating.timestamp) >= seven_days_ago,
            ResponseRating.rating == 0
        ).group_by(func.date(ResponseRating.timestamp)).all()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        today = datetime.datetime.now().date()
        weekly_positive_ratings = [0] * 7
        weekly_negative_ratings = [0] * 7

        for date, count in weekly_positive:
            if isinstance(date, str):
                date = datetime.datetime.strptime(date, '%Y-%m-%d').date()
            days_ago = (today - date).days
            if 0 <= days_ago < 7:
                weekly_positive_ratings[days_ago] = count

        for date, count in weekly_negative:
            if isinstance(date, str):
                date = datetime.datetime.strptime(date, '%Y-%m-%d').date()
            days_ago = (today - date).days
            if 0 <= days_ago < 7:
                weekly_negative_ratings[days_ago] = count

        # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–ª–µ–≤–∞
        weekly_positive_ratings.reverse()
        weekly_negative_ratings.reverse()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ü–µ–Ω–æ–∫
        recent_ratings = session.query(ResponseRating).order_by(
            ResponseRating.timestamp.desc()
        ).limit(10).all()

        return render_template(
            "analytics.html",
            faq_ratings=faq_ratings,
            ai_ratings=ai_ratings,
            human_ratings=human_ratings,
            faq_positive_percent=faq_positive_percent,
            ai_positive_percent=ai_positive_percent,
            human_positive_percent=human_positive_percent,
            recent_ratings=recent_ratings,
            weekly_positive_ratings=weekly_positive_ratings,
            weekly_negative_ratings=weekly_negative_ratings
        )
    finally:
        session.close()


@app.route("/analytics_json")
@login_required
@requires_role("admin", "superadmin")
def analytics_json():
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ü–µ–Ω–æ–∫
        recent_ratings = session.query(ResponseRating).order_by(
            ResponseRating.timestamp.desc()
        ).limit(10).all()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç JSON
        ratings_data = []
        for rating in recent_ratings:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
            moscow_time = to_moscow_time(rating.timestamp)
            ratings_data.append({
                "id": rating.id,
                "rating": rating.rating,
                "source": rating.source,
                "timestamp": moscow_time.strftime("%Y-%m-%d %H:%M:%S")
            })

        return jsonify({
            "ratings": ratings_data
        })
    finally:
        session.close()


@app.route("/users/add", methods=["POST"])
@login_required
@requires_role("admin", "superadmin")
def add_user():
    username = request.form.get("username")
    password = request.form.get("password")
    role = request.form.get("role")

    if not username or not password or not role:
        flash("–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.", "danger")
        return redirect(url_for("manage_users"))

    session = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        existing_user = session.query(User).filter(User.username == username).first()
        if existing_user:
            flash(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", "danger")
            return redirect(url_for("manage_users"))

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        hashed_password = generate_password_hash(password)
        new_user = User(
            username=username,
            password=hashed_password,
            role=role,
            _is_active=1  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )
        session.add(new_user)
        session.commit()

        flash(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.", "success")
        log_action(
            f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —Å —Ä–æ–ª—å—é '{role}'",
            action_type='user_create'
        )
    except Exception as e:
        session.rollback()
        flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}", "danger")
    finally:
        session.close()

    return redirect(url_for("manage_users"))


@app.route("/users/edit/<int:user_id>", methods=["POST"])
@login_required
@requires_role("admin", "superadmin")
def edit_user(user_id):
    username = request.form.get("username")
    password = request.form.get("password")
    role = request.form.get("role")

    if not username or not role:
        flash("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.", "danger")
        return redirect(url_for("manage_users"))

    session = SessionLocal()
    try:
        user = session.query(User).filter(User.id == user_id).first()
        if not user:
            flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "danger")
            return redirect(url_for("manage_users"))

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
        if current_user.role == "superadmin":
            # –°—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –≤—Å—ë
            pass
        else:
            # –ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
            if user.role == "superadmin":
                flash("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.", "danger")
                return redirect(url_for("manage_users"))

            # –ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –ø–æ–Ω–∏–∑–∏—Ç—å —Ä–æ–ª—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∞
            if user.role == "admin" and role != "admin" and user.id != current_user.id:
                flash("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–Ω–∏–∑–∏—Ç—å —Ä–æ–ª—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", "danger")
                return redirect(url_for("manage_users"))

            # –ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å –∫–æ–≥–æ-—Ç–æ –¥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
            if role == "superadmin":
                flash("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.", "danger")
                return redirect(url_for("manage_users"))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        existing_user = session.query(User).filter(
            User.username == username,
            User.id != user_id
        ).first()
        if existing_user:
            flash(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", "danger")
            return redirect(url_for("manage_users"))

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        old_username = user.username
        old_role = user.role

        user.username = username
        user.role = role

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if password and password.strip():  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ –ø—É—Å—Ç–æ–π
            user.password = generate_password_hash(password)

        session.commit()

        changes = []
        if old_username != username:
            changes.append(f"–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å '{old_username}' –Ω–∞ '{username}'")
        if old_role != role:
            changes.append(f"—Ä–æ–ª—å —Å '{old_role}' –Ω–∞ '{role}'")
        if password and password.strip():  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ –ø—É—Å—Ç–æ–π
            changes.append("–ø–∞—Ä–æ–ª—å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω")

        if changes:  # –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            log_action(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{old_username}': " + ", ".join(changes),
                action_type='user_edit'
            )
            flash(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.", "success")
        else:
            flash("–ù–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ.", "info")
    except Exception as e:
        session.rollback()
        flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}", "danger")
    finally:
        session.close()

    return redirect(url_for("manage_users"))


def log_action(action, action_type=None):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param action: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    :param action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "create_user", "delete_user")
    """
    session = SessionLocal()
    try:
        log_entry = Log(
            user_id=current_user.id,
            action=action,
            action_type=action_type,
            timestamp=datetime.datetime.now()
        )
        session.add(log_entry)
        session.commit()
    except Exception as e:
        session.rollback()
        print(f"Error logging action: {str(e)}")
    finally:
        session.close()


if __name__ == "__main__":
    app.run(debug=True)
