import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler,
)
from database import SessionLocal, Question, FAQ, ResponseRating, Log
from ollama_handler import OllamaHandler
import datetime
import asyncio
import functools
import re
import hashlib

TOKEN = "7795035095:AAFgeRJU8ZriQ-BCN4Ew_0YE7wttAYnZw2o"

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä OllamaHandler –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
ollama_instance = OllamaHandler()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –¥–ª–∏–Ω–æ–π callback_data)
# –§–æ—Ä–º–∞—Ç: {question_hash: question_text}
temp_questions = {}


def get_question_hash(question_text):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–µ—à –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
    # –°–æ–∑–¥–∞–µ–º MD5-—Ö–µ—à –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤
    return hashlib.md5(question_text.encode('utf-8')).hexdigest()[:8]


def save_temp_question(question_text):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–ø—Ä–æ—Å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Ö–µ—à"""
    question_hash = get_question_hash(question_text)
    temp_questions[question_hash] = question_text
    return question_hash


def find_faq_answer(question):
    session = SessionLocal()
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –≤–æ–ø—Ä–æ—Å
        normalized_question = question.lower().strip()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ FAQ –∑–∞–ø–∏—Å–∏
        faqs = session.query(FAQ).all()

        best_match = None
        highest_ratio = 0

        for faq in faqs:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ FAQ
            faq_question = faq.question.lower().strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π

            # 1. –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if normalized_question == faq_question:
                return faq.answer

            # 2. –°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ FAQ –≤–æ–ø—Ä–æ—Å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            words = normalized_question.split()
            matched_words = sum(1 for word in words if word in faq_question)
            ratio = matched_words / len(words) if words else 0

            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∏ –∏ –ø–æ—Ö–æ–∂–∏–µ —Å–ª–æ–≤–∞
            from difflib import SequenceMatcher
            similarity = SequenceMatcher(None, normalized_question, faq_question).ratio()

            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –≤ –≤–æ–ø—Ä–æ—Å–µ FAQ
            contains_ratio = 1.0 if normalized_question in faq_question else 0

            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏
            total_ratio = max(ratio, similarity, contains_ratio)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if total_ratio > highest_ratio and total_ratio > 0.4:  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ 40%
                highest_ratio = total_ratio
                best_match = faq.answer

        return best_match

    finally:
        session.close()


def send_message_to_user(chat_id, message, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": message,
    }

    if reply_markup:
        data["reply_markup"] = reply_markup.to_dict()

    try:
        response = requests.post(url, json=data)
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def notify_user_about_response(question_id):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –æ—Ç–≤–µ—Ç–µ"""
    session = SessionLocal()
    try:
        question = session.get(Question, question_id)
        if question and question.status == "–æ—Ç–≤–µ—á–µ–Ω" and question.response:
            message = (
                f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!\n"
                f"‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å:\n{question.question}\n"
                f"üìù –û—Ç–≤–µ—Ç:\n{question.response}"
            )

            keyboard = [
                [
                    InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"),
                    InlineKeyboardButton("üìã –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã", callback_data="my_questions")
                ],
                [
                    InlineKeyboardButton("üëç", callback_data=f"rate_up_human_{question_id}"),
                    InlineKeyboardButton("üëé", callback_data=f"rate_down_human_{question_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            send_message_to_user(question.user_id, message, reply_markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    finally:
        session.close()


def update_question_status(question_id, new_status, response=None):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    session = SessionLocal()
    try:
        question = session.get(Question, question_id)
        if question:
            old_status = question.status
            question.status = new_status
            if response:
                question.response = response

            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            log_entry = Log(
                user_id=0,  # –°–∏—Å—Ç–µ–º–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                question_id=question_id,
                action=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å '{old_status}' –Ω–∞ '{new_status}'",
                action_type='status_change',
                timestamp=datetime.datetime.now()
            )
            session.add(log_entry)
            session.commit()

            if new_status == "–æ—Ç–≤–µ—á–µ–Ω":
                notify_user_about_response(question_id)
    except Exception as e:
        session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    finally:
        session.close()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"),
            InlineKeyboardButton("üìã –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã", callback_data="my_questions")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n"
        "ü§ù –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )


async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω–∏ –±—ã–ª–∏ –Ω–∞–∂–∞—Ç—ã
    try:
        await query.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {e}")

    if query.data == "ask_question":
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = await query.message.reply_text(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n"
            "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–∫–∞–∑–∞—Ç—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
            reply_markup=reply_markup
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        context.user_data['instruction_message_id'] = message.message_id
        context.user_data['waiting_for_question'] = True

    elif query.data == "my_questions":
        await show_user_questions(update, context)

    elif query.data.startswith("view_question_"):
        await show_question_details(update, context)

    elif query.data == "cancel":
        context.user_data['waiting_for_question'] = False
        keyboard = [
            [
                InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"),
                InlineKeyboardButton("üìã –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã", callback_data="my_questions")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    elif query.data.startswith("not_helpful_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à –≤–æ–ø—Ä–æ—Å–∞ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        question_hash = query.data.replace("not_helpful_", "")
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        original_question = temp_questions.get(question_hash, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        session = SessionLocal()
        try:
            new_question = Question(
                user_id=query.from_user.id,
                question=original_question,
                status="–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                priority=2  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            )
            session.add(new_question)
            session.commit()

            keyboard = [
                [
                    InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"),
                    InlineKeyboardButton("üìã –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã", callback_data="my_questions")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.message.reply_text(
                "üôè –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç!\n"
                "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
                "‚è≥ –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=reply_markup
            )
        finally:
            session.close()
    elif query.data.startswith("rate_"):
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        parts = query.data.split("_")
        rating_type = parts[1]  # up –∏–ª–∏ down
        source = parts[2]  # faq, ai –∏–ª–∏ human

        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞, —Ç–æ parts[3] - —ç—Ç–æ ID –≤–æ–ø—Ä–æ—Å–∞
        # –ò–Ω–∞—á–µ parts[3] - —ç—Ç–æ —Ö–µ—à –≤–æ–ø—Ä–æ—Å–∞
        if source == "human":
            question_id = int(parts[3])
            question_text = None
        else:
            question_id = None
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ —Ö–µ—à—É
            question_hash = parts[3]
            question_text = temp_questions.get(question_hash, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        session = SessionLocal()
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞, —Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å question_id
            if question_id:
                rating = ResponseRating(
                    question_id=question_id,
                    user_id=query.from_user.id,
                    rating=1 if rating_type == "up" else 0,
                    source=source
                )
            # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞
            else:
                rating = ResponseRating(
                    user_id=query.from_user.id,
                    rating=1 if rating_type == "up" else 0,
                    source=source
                )

            session.add(rating)
            session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [
                    InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"),
                    InlineKeyboardButton("üìã –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã", callback_data="my_questions")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —É–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤.",
                reply_markup=reply_markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {e}")
        finally:
            session.close()


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('waiting_for_question'):
        return

    if 'instruction_message_id' in context.user_data:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['instruction_message_id']
            )
            del context.user_data['instruction_message_id']
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}")

    user_id = update.message.from_user.id
    question_text = update.message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Ö–µ—à
    question_hash = save_temp_question(question_text)

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ FAQ
    faq_answer = find_faq_answer(question_text)
    if faq_answer:
        keyboard = [
            [
                InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"),
                InlineKeyboardButton("üìã –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã", callback_data="my_questions")
            ],
            [InlineKeyboardButton("‚ö†Ô∏è –≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –º–Ω–µ –Ω–µ –ø–æ–º–æ–≥", callback_data=f"not_helpful_{question_hash}")],
            [
                InlineKeyboardButton("üëç", callback_data=f"rate_up_faq_{question_hash}"),
                InlineKeyboardButton("üëé", callback_data=f"rate_down_faq_{question_hash}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await update.message.reply_text(
            f"üîç –ù–∞–π–¥–µ–Ω –ø–æ—Ö–æ–∂–∏–π –æ—Ç–≤–µ—Ç:\n\n{faq_answer}",
            reply_markup=reply_markup
        )
        context.user_data['waiting_for_question'] = False
        return

    # 2. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FAQ, –∏—Å–ø–æ–ª—å–∑—É–µ–º Ollama
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
    processing_message = await update.message.reply_text(
        "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    async def process_ai_response(user_id, question_text, processing_message_id):
        # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç Ollama
        def on_response_ready(ai_response):
            asyncio.run_coroutine_threadsafe(
                send_ai_response(user_id, question_text, ai_response, processing_message_id),
                context.application.loop
            )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Ollama –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        # (—Ç–∞–∫ –∫–∞–∫ –≤—ã–∑—ã–≤–∞–µ–º –∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
        ai_response = ollama_instance.generate_response(question_text)
        await send_ai_response(user_id, question_text, ai_response, processing_message_id)

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
    async def send_ai_response(user_id, question_text, ai_response, processing_message_id):
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=processing_message_id
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        if ai_response:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –≤–æ–ø—Ä–æ—Å–∞ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            keyboard = [
                [
                    InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"),
                    InlineKeyboardButton("üìã –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã", callback_data="my_questions")
                ],
                [InlineKeyboardButton("‚ö†Ô∏è –≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –º–Ω–µ –Ω–µ –ø–æ–º–æ–≥", callback_data=f"not_helpful_{question_hash}")],
                [
                    InlineKeyboardButton("üëç", callback_data=f"rate_up_ai_{question_hash}"),
                    InlineKeyboardButton("üëé", callback_data=f"rate_down_ai_{question_hash}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"ü§ñ –û—Ç–≤–µ—Ç –ò–ò:\n\n{ai_response}",
                reply_markup=reply_markup
            )
            context.user_data['waiting_for_question'] = False
        else:
            # 3. –ï—Å–ª–∏ –ò–ò –Ω–µ —Å–º–æ–≥ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            session = SessionLocal()
            try:
                new_question = Question(
                    user_id=user_id,
                    question=question_text,
                    status="–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
                )
                session.add(new_question)
                session.commit()

                keyboard = [
                    [
                        InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"),
                        InlineKeyboardButton("üìã –ú–æ–∏ –≤–æ–ø—Ä–æ—Å—ã", callback_data="my_questions")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                         "‚è≥ –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                         "üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –æ—Ç–≤–µ—Ç.",
                    reply_markup=reply_markup
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            finally:
                session.close()
                context.user_data['waiting_for_question'] = False

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–∞ –ò–ò
    await process_ai_response(user_id, question_text, processing_message.message_id)


async def show_user_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = query.from_user.id

    session = SessionLocal()
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä is_archived == 0 –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–ª—å–∫–æ –Ω–µ–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        questions = session.query(Question).filter(
            Question.user_id == user_id,
            Question.is_archived == 0
        ).order_by(Question.id.desc()).all()

        if not questions:
            keyboard = [
                [
                    InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
                reply_markup=reply_markup
            )
            return

        keyboard = []
        for q in questions:
            status = "‚úÖ" if q.status == "–æ—Ç–≤–µ—á–µ–Ω" else "‚è≥"
            button_text = f"{status} {q.question[:30]}..."
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"view_question_{q.id}")])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cancel")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text(
            "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:",
            reply_markup=reply_markup
        )
    finally:
        session.close()


async def show_question_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    question_id = int(query.data.split('_')[2])

    session = SessionLocal()
    try:
        question = session.get(Question, question_id)
        if question:
            status_emoji = "‚úÖ" if question.status == "–æ—Ç–≤–µ—á–µ–Ω" else "‚è≥"
            status_text = "–û—Ç–≤–µ—á–µ–Ω" if question.status == "–æ—Ç–≤–µ—á–µ–Ω" else "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"

            priority_icons = {1: "üü¢", 2: "üü°", 3: "üî¥"}
            priority_text = {1: "–ù–∏–∑–∫–∏–π", 2: "–°—Ä–µ–¥–Ω–∏–π", 3: "–í—ã—Å–æ–∫–∏–π"}

            message_text = (
                f"–í–æ–ø—Ä–æ—Å #{question.id}\n\n"
                f"üìù {question.question}\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}\n"
                f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_icons[question.priority]} {priority_text[question.priority]}\n"
            )

            if question.response:
                message_text += f"\n–û—Ç–≤–µ—Ç: {question.response}"

            keyboard = [[InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="my_questions")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.message.reply_text(
                message_text,
                reply_markup=reply_markup
            )
        else:
            await query.message.reply_text("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    finally:
        session.close()


def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    app.add_handler(CallbackQueryHandler(handle_button))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


if __name__ == "__main__":
    main()
